# -*- coding: utf-8 -*-
"""Task2_Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hp544k5IhzXUJKlOPSqu0_YDVL74qAev
"""

# Constants
total_images = 100000
classes = ['Bounding Box', 'Polygon', 'Keypoint']
avg_objects_per_image = 1
annotation_benchmarks = {'Bounding Box': 10, 'Polygon': 15, 'Keypoint': 5}  # seconds per object
quality_check_benchmarks = {'Bounding Box': 5, 'Polygon': 7, 'Keypoint': 3}  # seconds per object
effective_working_hours_per_day = 6  # hours

# Calculate total time for annotation
total_time_annotation = sum(annotation_benchmarks[class_] * avg_objects_per_image * total_images for class_ in classes)

# Calculate total time for quality check
total_time_quality_check = sum(quality_check_benchmarks[class_] * avg_objects_per_image * total_images for class_ in classes)

# Calculate total effective working hours required for annotation and quality check
total_working_hours_annotation = total_time_annotation / (effective_working_hours_per_day * 3600)
total_working_hours_quality_check = total_time_quality_check / (effective_working_hours_per_day * 3600)

# Calculate total effective working hours required for annotation only
total_working_hours_annotation_only = total_working_hours_annotation

# Calculate total effective working hours to finish the task including quality check
total_working_hours_including_quality_check = total_working_hours_annotation + total_working_hours_quality_check

print("Total effective working hours to finish the task including Quality Check:", total_working_hours_including_quality_check, "days")
print("Total effective working hours to finish the task excluding Quality Check:", total_working_hours_annotation_only, "days")

import math

effective_working_hours_per_day = 6

# Total effective working hours required for annotation and quality check (including Quality Check)
total_working_hours_required = total_working_hours_including_quality_check  # calculated from previous code

# Number of working hours in 10 days
total_working_hours_in_10_days = effective_working_hours_per_day * 10

# Calculate total number of annotators required
total_annotators_required = math.ceil(total_working_hours_required / total_working_hours_in_10_days)

print("Total number of annotators required to accomplish the task in 10 days:", total_annotators_required)

import datetime
import math

# Additional annotators
extra_annotators = 5

# Calculate total effective working hours required with additional annotators
total_working_hours_required_with_extra_annotators = total_working_hours_required / (total_annotators_required + extra_annotators)

# Calculate the estimated number of working days required to complete the task
estimated_working_days_required = total_working_hours_required_with_extra_annotators / effective_working_hours_per_day

# Adjusting for weekends
remaining_days = estimated_working_days_required
current_date = datetime.datetime.now()

while remaining_days > 0:
    current_date += datetime.timedelta(days=1)
    if current_date.weekday() < 5:  # Monday to Friday
        remaining_days -= 1

estimated_delivery_date = current_date

print("Estimated delivery date to deliver the project to the client with extra annotators:", estimated_delivery_date.strftime("%Y-%m-%d"))